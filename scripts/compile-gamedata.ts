import fs from 'fs';
import path from 'path';
import Papa from 'papaparse';
import {resourceStringToObjectString, rewardStringToObjectString} from "./helper";

const SOURCE_DIR = './gamedata';
const TYPES_DIR = './src/shared/types';
const DATA_DIR = './src/core/data';


function getCsvRows(filePath: string) {
    const csvPath = path.join(SOURCE_DIR, filePath);
    const file = fs.readFileSync(csvPath, 'utf8');
    return Papa.parse(file, {header: true, skipEmptyLines: true}).data;
}

function processRowToDataEntry(row: any): string {
    const inputs = resourceStringToObjectString(row.inputs);
    const outputs = resourceStringToObjectString(row.outputs);
    return `${row.id}: { id: "${row.id}", buildingId: "${row.building_id}", name: "${row.name}", description: \`${row.description}\`${(row.icon)? `, icon: icon_${row.id}` : ''}, duration: ${row.duration}, xp: ${row.xp}, text: "${row.text}", inputs: ${inputs}, outputs: ${outputs} }`;
}

function resourceRowToDataEntry(row: any): string {
    return `${row.resource_id}: {id: '${row.resource_id}',name: '${row.name}',description: \`${row.description}\`, icon: icon_${row.resource_id}}`
}

function compileCsv(filePath: string, dataFunc : (row: any) => string, iconPath: string): [string[], string[], string[]] {
    const parsed = getCsvRows(filePath);

    const allIds: string[] = [];
    const iconImports: string[] = [];
    const dataEntries: string[] = [];


    parsed.forEach((row: any) => {
        allIds.push(row.id || row.resource_id);
        if (row.icon) {
            const iconVarName = `icon_${row.id || row.resource_id}`;
            iconImports.push(`import ${iconVarName} from '@/${iconPath}/${row.icon}';`);

        }

        dataEntries.push(dataFunc(row));
    })

    return [
        allIds,
        iconImports,
        dataEntries,
    ]
}


function handleResources() {
    const [allIds, iconImports, dataEntries] = compileCsv('resources.csv', resourceRowToDataEntry, 'resource-icon');

    const typesFileContent = `
// THIS FILE IS AUTO-GENERATED BY compile-gamedata.ts. DO NOT EDIT.

export const AllResourceIds = [
    ${allIds.map(id => `'${id}'`).join(',\n    ')}
] as const;
export type ResourceId = typeof AllResourceIds[number];
`
    const imports = [
        'import type {ResourceData} from "@/shared/types/game.types.ts"',
        'import type {ResourceId} from "@/shared/types/resources.types.ts"',
    ]

    const dataFileContent = `
// THIS FILE IS AUTO-GENERATED BY compile-gamedata.ts. DO NOT EDIT.

${imports.join('\n')}

// Import all icons
${iconImports.join('\n')}

export const RESOURCES: Record<ResourceId, ResourceData> = {
    ${dataEntries.join(',\n    ')}
} as const;
`;


    fs.writeFileSync(path.join(TYPES_DIR, 'resources.types.ts'), typesFileContent);
    console.log("✅ Wrote resources.types.ts");

    fs.writeFileSync(path.join(DATA_DIR, 'resources.data.ts'), dataFileContent);
    console.log("✅ Wrote resources.data.ts");
}


function handleProcesses() {
    const [allIds, iconImports, dataEntries] = compileCsv('processes.csv', processRowToDataEntry, 'process-icon');
    const typesFileContent = `
// THIS FILE IS AUTO-GENERATED BY compile-gamedata.ts. DO NOT EDIT.

export const AllProcessIds = [
    ${allIds.map(id => `'${id}'`).join(',\n    ')}
] as const;
export type ProcessId = typeof AllProcessIds[number];
`;

    const imports = [
        'import type {ProcessData} from "@/shared/types/game.types.ts"',
        'import type {ProcessId} from "@/shared/types/processes.types.ts"',
    ]

    const dataFileContent = `
// THIS FILE IS AUTO-GENERATED BY compile-gamedata.ts. DO NOT EDIT.

${imports.join('\n')}

// Import all icons
${iconImports.join('\n')}

export const PROCESSES: Record<ProcessId, ProcessData> = {
    ${dataEntries.join(',\n    ')}
} as const;
`;

    fs.writeFileSync(path.join(TYPES_DIR, 'processes.types.ts'), typesFileContent);
    console.log("✅ Wrote processes.types.ts");

    fs.writeFileSync(path.join(DATA_DIR, 'processes.data.ts'), dataFileContent);
    console.log("✅ Wrote processes.data.ts");

}

function handleProgression() {
    const rows = getCsvRows('progression.csv');

    const progressionData: Record<string, any[]> = {};

    rows.forEach((row: any) => {
        if (!progressionData[row.building_id]) {
            progressionData[row.building_id] = [];
        }
        progressionData[row.building_id].push(row);
    });

    const progressionIds = Object.keys(progressionData);

    const dataFileContent = `
// THIS FILE IS AUTO-GENERATED BY compile-gamedata.ts. DO NOT EDIT.

import type {ProgressionData} from "@/shared/types/game.types.ts";

export const PROGRESSION: Record<string, ProgressionData> = {
    ${progressionIds.map(id => {
        const progressionLevels = progressionData[id].map(row => {
            const resources = resourceStringToObjectString(row.resources);
            const rewards = rewardStringToObjectString(row.rewards);
            return `${row.level}: { xp: ${row.xp}, resources: ${resources}, rewards: ${rewards} }`;
        }).join(',\n        ');
        return `${id}: {\n        ${progressionLevels}\n    }`;}
    ).join(',\n    ')}
};
`;

    fs.writeFileSync(path.join(DATA_DIR, 'progression.data.ts'), dataFileContent);
    console.log("✅ Wrote progression.data.ts");
}

handleResources();
handleProcesses();
handleProgression();
